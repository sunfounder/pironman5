.. note::

    ¬°Hola! Bienvenido a la Comunidad de Entusiastas de SunFounder Raspberry Pi & Arduino & ESP32 en Facebook. Profundiza en Raspberry Pi, Arduino y ESP32 junto a otros entusiastas.

    **¬øPor qu√© unirte?**

    - **Soporte experto**: Resuelve problemas postventa y desaf√≠os t√©cnicos con la ayuda de nuestra comunidad y equipo.
    - **Aprende y comparte**: Intercambia consejos y tutoriales para mejorar tus habilidades.
    - **Avances exclusivos**: Obt√©n acceso anticipado a anuncios de nuevos productos y adelantos exclusivos.
    - **Descuentos especiales**: Disfruta de descuentos exclusivos en nuestros productos m√°s recientes.
    - **Promociones festivas y sorteos**: Participa en sorteos y promociones especiales durante las festividades.

    üëâ ¬øListo para explorar y crear con nosotros? Haz clic en [|link_sf_facebook|] y √∫nete hoy mismo.


RTL-SDR Blog V4
==============================================

.. note::

    Los productos de la serie Pironman 5 no incluyen los siguientes m√≥dulos.  
    Necesitas preparar uno por tu cuenta o comprarlo en nuestro sitio web oficial:

    * `RTL-SDR Blog V4 <https://www.sunfounder.com/products/rtl-sdr-blog-v4>`_

Esta gu√≠a cubre un procedimiento de instalaci√≥n confiable para el RTL-SDR Blog V4, un receptor de radio definido por software (SDR) USB popular y asequible.  
La versi√≥n V4 cuenta con un sintonizador R828D mejorado, modo de muestreo directo, mejor sensibilidad y bias-tee integrado para alimentar antenas activas.  
Funciona bien para recibir FM comercial, banda a√©rea, radioaficionados, ADS-B y muchas otras se√±ales en sistemas Linux y Raspberry Pi.

Para la documentaci√≥n del fabricante original, consulta la gu√≠a oficial del RTL-SDR Blog V4: https://www.rtl-sdr.com/V4/

----

Instalar el Controlador para RTL-SDR Blog V4
--------------------------------------------------

**0. Preparaci√≥n**

.. code-block:: shell

   sudo apt update
   sudo apt install -y git cmake build-essential pkg-config libusb-1.0-0-dev sox

Nota:  
    ``sox`` (proporciona el comando ``play``) se incluye para pruebas directas de audio.

**1. Limpieza Completa de Bibliotecas y Binarios Antiguos (Cr√≠tica)**

.. code-block:: shell

   sudo apt purge -y 'librtlsdr*'
   sudo rm -rf /usr/lib/librtlsdr* /usr/include/rtl-sdr* \
               /usr/local/lib/librtlsdr* /usr/local/include/rtl-sdr* \
               /usr/local/include/rtl_* /usr/local/bin/rtl_*
   sudo ldconfig

Verificaci√≥n A:

.. code-block:: shell

   ldconfig -p | grep rtlsdr || echo "OK: No se encontr√≥ librtlsdr en la cach√© del sistema."

**2. Compilar e Instalar el Controlador RTL-SDR Blog V4**

.. code-block:: shell

   cd ~
   git clone https://github.com/rtlsdrblog/rtl-sdr-blog.git
   cd rtl-sdr-blog
   mkdir build && cd build
   cmake .. -DINSTALL_UDEV_RULES=ON
   make
   sudo make install
   sudo cp ../rtl-sdr.rules /etc/udev/rules.d/
   sudo ldconfig

Verificaci√≥n B:

.. code-block:: shell

   which rtl_test
   ldd "$(which rtl_test)" | grep rtlsdr   # Debe apuntar a /usr/local/lib/librtlsdr.so

**3. Deshabilitar el M√≥dulo del Kernel DVB y Reiniciar**

.. code-block:: shell

   echo 'blacklist dvb_usb_rtl28xxu' | sudo tee /etc/modprobe.d/blacklist-dvb_usb_rtl28xxu.conf
   sudo reboot

Nota:  
    Los comandos de recarga inmediata (``udevadm control --reload-rules`` y ``udevadm trigger``)  
    son opcionales si planeas reiniciar de inmediato.

**4. Verificar el Controlador Despu√©s del Reinicio**

.. code-block:: shell

   rtl_test -t

Esperado:  
    La salida debe incluir ``RTL-SDR Blog V4 Detected`` sin mensajes de ``[R82XX] PLL not locked!``.  
    La l√≠nea ``Using device 0: Generic RTL2832U OEM`` es normal ‚Äî solo es el nombre USB.

**6. Probar la Recepci√≥n de FM desde la L√≠nea de Comandos**

.. code-block:: shell

   rtl_fm -f 97.1M -M wbfm -s 180000 -r 48000 -g 28 | play -t raw -r 48k -e s -b 16 -c 1 -

Consejos:

    * ``-g``: Prueba entre 25‚Äì35 dB; m√°s alto no siempre es mejor.  
    * Reduce ``-s`` a ~170k‚Äì180k para disminuir el ruido.  
    * Ajusta la frecuencia ligeramente (ej. ``97.1005M``) para un ajuste fino.  
    * Cierra cualquier otro software SDR que pueda estar usando el dispositivo.

----

Instalaci√≥n de Software de Radio Com√∫n
-----------------------------------------

Esta secci√≥n presenta cuatro aplicaciones SDR ampliamente utilizadas, con breves descripciones, instrucciones de instalaci√≥n y consejos b√°sicos de configuraci√≥n para sistemas basados en Debian.

* :ref:`install_gqrx`
* :ref:`install_sdrpp`
* :ref:`install_rtl433`
* :ref:`install_dump1090`


----

.. _install_gqrx:

GQRX
^^^^^^^^^^^^

GQRX es una aplicaci√≥n receptora SDR simple y f√°cil de usar con interfaz gr√°fica. Soporta una amplia gama de dispositivos SDR y es ideal para escuchar FM, AM, SSB y otras se√±ales con espectro en tiempo real y visualizaciones waterfall.

Tambi√©n puedes consultar la gu√≠a oficial de instalaci√≥n para Raspberry Pi aqu√≠: https://www.gqrx.dk/download/gqrx-sdr-for-the-raspberry-pi

**Opci√≥n 1 ‚Äì Instalaci√≥n R√°pida (Recomendada para la mayor√≠a de usuarios)**

R√°pida, simple e integrada con las actualizaciones del sistema ‚Äî pero puede que no sea la √∫ltima versi√≥n.

.. code-block:: shell

   sudo apt update
   sudo apt install -y --no-install-recommends gqrx-sdr

**Opci√≥n 2 ‚Äì Compilar desde el C√≥digo Fuente (Opcional, √öltimas Funciones)**

Garantiza la √∫ltima versi√≥n y personalizaci√≥n completa, pero tarda m√°s en compilar y requiere m√°s dependencias.

.. code-block:: shell

   sudo apt update

   sudo apt-get install -y --no-install-recommends \
     cmake gnuradio-dev gr-osmosdr qt6-base-dev qt6-svg-dev \
     libasound2-dev libjack-jackd2-dev portaudio19-dev libpulse-dev

   git clone https://github.com/gqrx-sdr/gqrx.git
   cd gqrx
   mkdir build && cd build
   cmake ..
   make
   sudo make install

**Prevenci√≥n de Sobrescritura del Controlador**

Al instalar GQRX, SDR++, gnuradio-dev o gr-osmosdr, el sistema puede reinstalar ``librtlsdr`` desactualizado.  
Despu√©s de cada instalaci√≥n, comprueba:

.. code-block:: shell

    ldd "$(which rtl_test)" | grep rtlsdr

Si ya no apunta a ``/usr/local/lib/librtlsdr.so``, ejecuta:

.. code-block:: shell

    sudo apt purge -y 'librtlsdr*'
    sudo ldconfig
    cd ~/rtl-sdr-blog/build && sudo make install && sudo ldconfig


Puedes probar inmediatamente (o despu√©s de un reinicio para un entorno limpio):

.. code-block:: shell

   rtl_test -t

Salida esperada:

   * Contiene RTL-SDR Blog V4 Detected.  
   * No hay mensajes [R82XX] PLL not locked!.

**Configuraci√≥n en la Primera Ejecuci√≥n**

* **Dispositivos de E/S**:

  * Dispositivo: ``RTL-SDR (V4)``.  
  * Tasa de entrada: ``1.8 MSPS`` (1800000).

* **Controles de Entrada**:

  * **Ganancia LNA**: Comienza alrededor de 25‚Äì35 dB, ajusta seg√∫n sea necesario.

* **Opciones del Receptor**:

  * Establece la Correcci√≥n de Frecuencia (PPM) seg√∫n tu calibraci√≥n.  
  * Modo: ``WFM (mono o est√©reo)`` para FM comercial.

----

.. _install_sdrpp:

SDR++ (SDRpp)
^^^^^^^^^^^^^

SDR++ es un receptor SDR moderno, r√°pido y multiplataforma que soporta una variedad de dispositivos, incluido el RTL-SDR Blog V4. Ofrece una interfaz limpia y f√°cil de usar, amplio soporte de modulaci√≥n, filtrado DSP avanzado y capacidades de grabaci√≥n.

Puedes consultar el manual oficial aqu√≠: https://www.sdrpp.org/manual.pdf


**Instalar desde el C√≥digo Fuente**

.. code-block:: shell

   sudo apt update
   sudo apt install -y --no-install-recommends build-essential cmake git pkg-config \
     libfftw3-dev libvolk2-dev libglfw3-dev libglew-dev \
     libzstd-dev librtaudio-dev

   git clone https://github.com/AlexandreRouma/SDRPlusPlus
   cd SDRPlusPlus
   mkdir build && cd build
   cmake .. -DOPT_BUILD_RTL_SDR_SOURCE=ON
   make
   sudo make install

**Prevenci√≥n de Sobrescritura del Controlador**

Al instalar GQRX, SDR++, gnuradio-dev o gr-osmosdr, el sistema puede reinstalar ``librtlsdr`` desactualizado.  
Despu√©s de cada instalaci√≥n, comprueba:

.. code-block:: shell

    ldd "$(which rtl_test)" | grep rtlsdr

Si ya no apunta a ``/usr/local/lib/librtlsdr.so``, ejecuta:

.. code-block:: shell

    sudo apt purge -y 'librtlsdr*'
    sudo ldconfig
    cd ~/rtl-sdr-blog/build && sudo make install && sudo ldconfig


Puedes probar inmediatamente (o despu√©s de un reinicio para un entorno limpio):

.. code-block:: shell

   rtl_test -t

Salida esperada:

   * Contiene RTL-SDR Blog V4 Detected.  
   * No hay mensajes [R82XX] PLL not locked!.

**Notas de la Primera Ejecuci√≥n:**

Despu√©s de la instalaci√≥n, SDR++ aparecer√° en el men√∫ de tu escritorio (usualmente bajo "Otros"), o puedes ejecutar:

   .. code-block:: shell

      sdrpp

* **Dispositivo:** Selecciona **RTL-SDR (V4)** en el men√∫ **Source**.  
* **Tasa de muestreo:** 1.8 MSPS es t√≠pico; baja si la carga de CPU es alta.  
* **Ganancia:** Desactiva AGC y ajusta manualmente (comienza ~35 dB).  
* **Correcci√≥n PPM:** Introduce tu valor de calibraci√≥n desde ``rtl_test -p``.  
* **Modo de Demodulaci√≥n:** Elige WFM para FM comercial, SSB para bandas de radioaficionados, etc.

----

.. _install_rtl433:

rtl_433
^^^^^^^^^^^^

rtl_433 es una herramienta de l√≠nea de comandos para decodificar transmisiones de radio de dispositivos que operan en la banda ISM de 433 MHz, como estaciones meteorol√≥gicas, sensores de presi√≥n de neum√°ticos y term√≥metros inal√°mbricos.

**Instalar:**

.. code-block:: shell

   sudo apt install -y rtl-433

**Prevenci√≥n de Sobrescritura del Controlador**

Al instalar GQRX, SDR++, gnuradio-dev o gr-osmosdr, el sistema puede reinstalar ``librtlsdr`` desactualizado.  
Despu√©s de cada instalaci√≥n, comprueba:

.. code-block:: shell

    ldd "$(which rtl_test)" | grep rtlsdr

Si ya no apunta a ``/usr/local/lib/librtlsdr.so``, ejecuta:

.. code-block:: shell

    sudo apt purge -y 'librtlsdr*'
    sudo ldconfig
    cd ~/rtl-sdr-blog/build && sudo make install && sudo ldconfig


Puedes probar inmediatamente (o despu√©s de un reinicio para un entorno limpio):

.. code-block:: shell

   rtl_test -t

Salida esperada:

   * Contiene RTL-SDR Blog V4 Detected.  
   * No hay mensajes [R82XX] PLL not locked!.

**Uso B√°sico:**

* Ejecuta ``rtl_433`` para detectar y decodificar autom√°ticamente dispositivos comunes de 433 MHz.  
* Usa ``rtl_433 -G`` para listar todos los protocolos soportados.

----

.. _install_dump1090:

dump1090-mutability
^^^^^^^^^^^^^^^^^^^^^^^^^^^

dump1090-mutability es un decodificador Mode S para datos de transpondedor ADS-B de aeronaves. Recibe y decodifica posiciones de aviones, velocidades y otros datos de vuelo, y puede servir un mapa en vivo a trav√©s de un navegador web.

**Instalar:**

.. code-block:: shell

   sudo apt install -y dump1090-mutability

**Prevenci√≥n de Sobrescritura del Controlador**

Al instalar GQRX, SDR++, gnuradio-dev o gr-osmosdr, el sistema puede reinstalar ``librtlsdr`` desactualizado.  
Despu√©s de cada instalaci√≥n, comprueba:

.. code-block:: shell

    ldd "$(which rtl_test)" | grep rtlsdr

Si ya no apunta a ``/usr/local/lib/librtlsdr.so``, ejecuta:

.. code-block:: shell

    sudo apt purge -y 'librtlsdr*'
    sudo ldconfig
    cd ~/rtl-sdr-blog/build && sudo make install && sudo ldconfig


Puedes probar inmediatamente (o despu√©s de un reinicio para un entorno limpio):

.. code-block:: shell

   rtl_test -t

Salida esperada:

   * Contiene RTL-SDR Blog V4 Detected.  
   * No hay mensajes [R82XX] PLL not locked!.

**Uso B√°sico:**

* Ejecuta: ``dump1090 --interactive --net``.  
* Abre ``http://<raspberrypi-ip>:8080`` en tu navegador para ver el rastreo en vivo de aeronaves.
